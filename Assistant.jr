import edu.ucdavis.jr.*;
import java.util.*;

public class Assistant {
    
    private boolean running;
    private ServingArea servingArea;
    private List<Table> tables;
    private List<Container> tray;
    
    public op void finalRound();
    
    public Assistant(ServingArea servingArea, List<Table> tables) {
        this.running = true;
        this.servingArea = servingArea;
        this.tables = tables;
        this.tray = new ArrayList<Container>();
    }
    
    public process run {
        while (this.running) {
            inni void finalRound() {
                System.out.println("Assistant: All is quiet. Making my final sweep!");
                this.sweep();
                System.out.println("Assistant: Done for tonight. Time to head home.");
                this.running = false;
            } else {
                this.sweep();
                System.out.println("Assistant: Time for my break.");
                JR.nap(Pub.ASSISTANT_BREAK);
            }
        }
    }
    
    private void sweep() {
        System.out.println("Assistant: Time for my sweep.");
        
        // put dirty dish on tray
        List<Container> tmp;
        for (Table table : this.tables) {
            tmp = table.clean();
            JR.nap(Pub.ASSISTANT_HANDLE_CONTAINER * tmp.size());
            this.tray.addAll(tmp);
            JR.nap(Pub.ASSISTANT_WALK_BETWEEN_TABLES);
        }
        
        // clean dirty dishes
        JR.nap(Pub.ASSISTANT_CLEAN_CONTAINER * this.tray.size());
        
        // put back clean dishes
        for (Container container : this.tray) {
            if (container instanceof Glass) {
                this.servingArea.getCupboard().getGlassAllocator().release((Glass) container);
            } else if (container instanceof Cup) {
                this.servingArea.getCupboard().getCupAllocator().release((Cup) container);
            }
            JR.nap(Pub.ASSISTANT_HANDLE_CONTAINER);
        }
        System.out.println("Assistant: Collected and washed " + this.tray.size() + " containers");
        this.tray = new ArrayList<Container>();
    }
}