import edu.ucdavis.jr.*;
import java.util.*;

/**
 * Program for simulating a concurrent pub.
 */
public class Pub {
    
    /**
     * Configuration constants for the simulation.
     */
    public static final int SIMULATION_SPEED = 1;
    public static final int NUM_CUPS = 15;
    public static final int NUM_GLASSES = 20;
    public static final int NUM_TABLES = 15;
    public static final int DELAY_CONTAINER = 5 * Pub.SIMULATION_SPEED;
    public static final int DELAY_INGREDIENT = 12 * Pub.SIMULATION_SPEED;
    public static final int DELAY_MIX = 30 * Pub.SIMULATION_SPEED;
    public static final int TABLE_SIZE = 10;
    public static final int ASSISTANT_BREAK = 15 * 60 * Pub.SIMULATION_SPEED;
    public static final int ASSISTANT_HANDLE_CONTAINER = 1 * Pub.SIMULATION_SPEED;
    public static final int ASSISTANT_CLEAN_CONTAINER = 10 * Pub.SIMULATION_SPEED;
    public static final int ASSISTANT_WALK_BETWEEN_TABLES = 10 * Pub.SIMULATION_SPEED;
    public static final int CUSTOMER_MIN_TIME_UNTIL_NEW_ARRIVAL = 5 * 60 * Pub.SIMULATION_SPEED;
    public static final int CUSTOMER_MAX_TIME_UNTIL_NEW_ARRIVAL = 50 * 60 * Pub.SIMULATION_SPEED;
    public static final MyTime TIME_OPEN = new MyTime(4, 0, 0);
    public static final MyTime TIME_LAST_CALL = new MyTime(1, 50, 0);
    
    /**
     * Types of available drinks at the pub.
     */
    public static enum Drink {
        BEER, CAPPUCCINO, CHOCOLATE
    }
    
    /** The assistant sweeps the tables and does the dishes */
    private Assistant assistant;
    
    /** The barmaid helps the landlord take orders from customers */
    private Barmaid barmaid;
    
    /** The landlord runs the pub */
    private Landlord landlord;
    
    /** The serving area contains everything needed for customer orders */
    private ServingArea servingArea;
    
    /** Keeps track of pub statistics */
    private Statistics statistics;
    
    /** The tables in the pub */
    private List<Table> tables;

    /**
     * Start program.
     */
    public static void main(String[] args) {
        new Pub();
    }
    
    /**
     * Initialize pub process!
     */
    public Pub() {
        System.out.println("Pub: Opened");
        this.tables = new Vector<Table>();
        for (int i = 0; i < Pub.NUM_TABLES; i++) {
            tables.add(new Table(Pub.TABLE_SIZE));
        }
        this.servingArea = new ServingArea();
        this.assistant = new Assistant(this.servingArea, this.tables);
        this.barmaid = new Barmaid(this.servingArea);
        this.landlord = new Landlord(this);
        this.statistics = new Statistics();
    }
    
    /**
     * Customers arrive randomly while the pub is open (landlord is still serving)
     */
    public process run {
        Random random = new Random();
        while (this.landlord.isServing()) {
            Customer c = new Customer(
                this.servingArea.order, // channel for placing orders
                this.landlord.customerLeft, // channel for saying goodbye to the landlord when leaving
                this.statistics.waitingTime, // channel for reporting statistics on waiting time
                this.tables.get(random.nextInt(Pub.NUM_TABLES)) // preferred table
            );
            this.landlord.addCustomer(c);
            JR.nap(Pub.CUSTOMER_MIN_TIME_UNTIL_NEW_ARRIVAL + random.nextInt(Pub.CUSTOMER_MAX_TIME_UNTIL_NEW_ARRIVAL));
        }
    }
    
    public List<Table> getTables() {
        return this.tables;
    }
    
    public Assistant getAssistant() {
        return this.assistant;
    }
    
    public Barmaid getBarmaid() {
        return this.barmaid;
    }
    
    public ServingArea getServingArea() {
        return this.servingArea;
    }
    
    public Statistics getStatistics() {
        return this.statistics;
    }
}