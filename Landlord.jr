import edu.ucdavis.jr.*;
import java.util.*;

public class Landlord extends ServicePerson {
    
    private Clock clock;
    private Pub pub;
    private boolean running;
    private List<Customer> customers;
    private boolean serving;
    
    private op void closingTime();
    private op void lastCall();
    
    public Landlord(Pub pub) {
        this.clock = new Clock(Pub.SIMULATION_SPEED, Pub.TIME_OPEN);
        this.pub = pub;
        this.customers = new Vector<Customer>();
        this.serving = true;
        this.running = true;
        
        // set alarms
        send this.clock.setAlarmEndTime(this.closingTime);
        send this.clock.setAlarm(this.lastCall, Pub.TIME_LAST_CALL);
    }
    
    public process run {
        ServingArea servingArea = this.pub.getServingArea(); 
        while (this.running) {
            inni void closingTime() {
                System.out.println("Landlord: Look at the time! Barmaid go home.");
                send this.pub.getBarmaid().leave();
                this.serving = false;
                System.out.println("Landlord: Time to go home, fellas!");
                for (Customer c : this.customers) {
                    send c.leave();
                }
            } 
            [] void customerLeft(Customer c) {
                this.customers.remove(c);
                // if it's closing time and all customers have left, close up shop
                if (this.customers.count() == 0 && !this.serving) {
                    System.out.println("Landlord: That's all of 'em.");
                    call this.pub.getAssistant().finalRound();
                    send this.clock.shutdown();
                    this.running = false;
                }
            }
            [] void lastCall() {
                System.out.println("Landlord: Last call!");
                for(Customer c : this.customers) {
                    send c.lastCall();
                }
            }
            [] void servingArea.order(cap void(Container) customer, Pub.Drink type)
                    st (closingTime.length() == 0 || lastCall.length() == 0) && this.serving {
                System.out.println("Landlord: Received order of " + type + ". On it!");
                Container drink = this.makeDrink(type);
                send customer(drink);
            }
        }
        System.out.println("Landlord: That's it. Closing up for tonight. Good bye pub!");
    }
    
    public boolean isServing() {
        return this.serving;
    }
    
    public void addCustomer(Customer c) {
        this.customers.add(c);
    }
    
    public void removeCustomer(Customer c) {
        this.customers.remove(c);
    }

    protected ServingArea getServingArea() {
        return this.pub.getServingArea();
    }

}