import edu.ucdavis.jr.*;
import java.util.*;

/** 
 *The landlord runs the pub. 
 */
public class Landlord extends ServicePerson {
    
    /** Keeps track of closing time and last call */
    private Clock clock;
    
    /** Knows all the customers in the pub */
    private List<Customer> customers;
    
    /** Knows the entire pub */
    private Pub pub;
    
    /** Process running or not */
    private boolean running;
    
    /** Taking new orders or not */
    private boolean serving;
    
    /** Channel for listening for closing time message from clock */
    private op void closingTime();
    
    /** Channel for listening for last call message from clock */
    private op void lastCall();
    
    /** Channel for listening for customer left message from customer */
    public op void customerLeft(Customer c);
    
    /**
     * Initialize landlord process!
     */
    public Landlord(Pub pub) {
        this.clock = new Clock(Pub.SIMULATION_SPEED, Pub.TIME_OPEN);
        this.customers = new Vector<Customer>();
        this.pub = pub;
        this.running = true;
        this.serving = true;
        
        // set alarms
        send this.clock.setAlarmEndTime(this.closingTime);
        send this.clock.setAlarm(this.lastCall, Pub.TIME_LAST_CALL);
    }
    
    /**
     * Landlord serves customers, described in ServicePerson.jr, keeps track
     * of all customers currently in the pub, and listens for last call and 
     * closing time alarms from his clock.
     */
    public process run {
        ServingArea servingArea = this.pub.getServingArea(); 
        while (this.running) {
            // It is closing time! Tell everybody to go home.
            inni void closingTime() {
                System.out.println("Landlord: Look at the time! Barmaid go home.");
                send this.pub.getBarmaid().leave();
                this.serving = false;
                System.out.println("Landlord: Time to go home, fellas!");
                for (Customer c : this.customers) {
                    send c.leave();
                }
                this.checkClosing();
            }
            // Customer left the pub. 
            [] void customerLeft(Customer c) {
                this.customers.remove(c);
                this.checkClosing();
            }
            // Time for last call. Notify all customers.
            [] void lastCall() {
                System.out.println("Landlord: Last call!");
                for(Customer c : this.customers) {
                    send c.lastCall();
                }
            }
            // Someone ordered something. Serve the customer.
            [] void servingArea.order(cap void(Container) customer, Pub.Drink type)
                    st (closingTime.length() == 0 || lastCall.length() == 0 || customerLeft.length() == 0) && this.serving
            {
                System.out.println("Landlord: Received order of " + type + ". On it!");
                Container drink = this.makeDrink(type);
                send customer(drink);
            }
        }
        
        // Perform statistics now that everybody has gone home.
        
        // Make sure all glasses and cups have been returned
        Cupboard cb = this.pub.getServingArea().getCupboard();
        if(cb.getCupAllocator().size() != Pub.NUM_CUPS || cb.getGlassAllocator().size() != Pub.NUM_GLASSES) {
            System.out.println("Landlord: Something is missing from the cupboard!");
        }
        
        // Make sure all tables are empty
        int containersLeft = 0;
        for(Table t : this.pub.getTables()) {
            containersLeft += t.numberOfContainers();
        }
        if(containersLeft != 0) {
            System.out.println("Landlord: Damn you, lazy assistant!");
        }
        
        // Check tonights statistics
        Statistics stats = this.pub.getStatistics();
        System.out.println("Landlord: We had a total of " + stats.getNumberOfOrders() + " orders tonight.");
        System.out.println("Landlord: The average time from order to serving was " + stats.getAverage() + ".");
        System.out.println("Landlord: The longest time was " + stats.getMax() + " and the shortest was " + stats.getMin() + ".");
        stats.kill();
        
        System.out.println("Landlord: That's it. Closing up for tonight. Good bye pub!");
    }
    
    /**
     * See if we can close up shop. If there are no more customers and 
     * we are post last order, terminate process.
     */
    private void checkClosing() {
        if (this.customers.size() == 0 && !this.serving) {
            System.out.println("Landlord: That's all of 'em.");
            call this.pub.getAssistant().finalRound();
            send this.clock.shutdown();
            this.running = false;
        }
    }
    
    public boolean isServing() {
        return this.serving;
    }
    
    public void addCustomer(Customer c) {
        this.customers.add(c);
    }
    
    public void removeCustomer(Customer c) {
        this.customers.remove(c);
    }

    protected ServingArea getServingArea() {
        return this.pub.getServingArea();
    }
}