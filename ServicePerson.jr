import edu.ucdavis.jr.*;

/**
 * Abstract class describing a person working with serving beverages in the pub.
 */
public abstract class ServicePerson {
    
    protected Container makeDrink(Pub.Drink type) {
        if (type == Pub.Drink.BEER) {
            // Grab a glass and fill it with beer!
            Glass glass = this.getCupboard().getGlassAllocator().allocate();
            JR.nap(Pub.DELAY_CONTAINER);
            Ingredient beerTap = this.getServingArea().getBeerTapAllocator().allocate();
            JR.nap(Pub.DELAY_INGREDIENT);
            glass.fill(type);
            send this.getServingArea().getBeerTapAllocator().release(beerTap);
            return glass;
        } else if (type == Pub.Drink.CAPPUCCINO) {
            // Grab a cup and make a cappucino using milk and coffee!
            Cup cup = this.getCupboard().getCupAllocator().allocate();
            JR.nap(Pub.DELAY_CONTAINER);
            Ingredient coffee = this.getCupboard().getCoffeeAllocator().allocate();
            JR.nap(Pub.DELAY_INGREDIENT);
            send this.getCupboard().getCoffeeAllocator().release(coffee);
            Ingredient milk = this.getCupboard().getMilkAllocator().allocate();
            JR.nap(Pub.DELAY_INGREDIENT);
            send this.getCupboard().getMilkAllocator().release(milk);
            JR.nap(Pub.DELAY_MIX);
            cup.fill(type);
            return cup;
        } else {
            // Grab a cup and make a hot chocolate using milk and chocolate!
            Cup cup = this.getCupboard().getCupAllocator().allocate();
            JR.nap(Pub.DELAY_CONTAINER);
            Ingredient coco = this.getCupboard().getChocolateAllocator().allocate();
            JR.nap(Pub.DELAY_INGREDIENT);
            send this.getCupboard().getChocolateAllocator().release(coco);
            Ingredient milk = this.getCupboard().getMilkAllocator().allocate();
            JR.nap(Pub.DELAY_INGREDIENT);
            send this.getCupboard().getMilkAllocator().release(milk);
            JR.nap(Pub.DELAY_MIX);
            cup.fill(type);
            return cup;
        }
    }
    
    /**
     * Convenience method for getting the reference to the cupboard.
     */
    protected Cupboard getCupboard() {
        return this.getServingArea().getCupboard();
    }
    
    /**
     * Abstract method for getting the reference to the serving area.
     */
    protected abstract ServingArea getServingArea();
    
}