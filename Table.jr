import edu.ucdavis.jr.*;
import java.util.*;

/**
 * A table is where containers can be put once they're empty.
 * They have a limited amount of available space, so they need to be
 * emptied every now and then.
 */
public class Table {    
    
    private List<Container> containers;
    private int remainingSpaceUnits;
    private int spaceUnits;
    private List<cap void()> waitingCustomers;
    
    /** Channel for customer to request having their containers put down. */
    public op boolean putDown(cap void() customer, Container container);
    
    /** Channel used to empty the table. */
    public op List<Container> clean();
    
    /**
     * Create a new table with the given amount of space.
     */
    public Table(int spaceUnits) {
        this.containers = new ArrayList<Container>();
        this.remainingSpaceUnits = spaceUnits; 
        this.spaceUnits = spaceUnits;
        this.waitingCustomers = new ArrayList<cap void()>();
    }
    
    /**
     * Table process that handles customers putting down containers and
     * assistants emptying it.
     */
    private process server { 
        while (true) {
            inni boolean putDown(cap void() customer, Container container) {
                // Put down container if ther's enough room
                if (this.remainingSpaceUnits < container.getSize()) {
                    waitingCustomers.add(customer);
                    return false;
                } else {
                    this.remainingSpaceUnits -= container.getSize();
                    this.containers.add(container);
                    return true;
                }
            }
            [] List<Container> clean() {
                // Remove all empty containers.
                this.remainingSpaceUnits = this.spaceUnits;
                List<Container> tmp = this.containers;
                this.containers = new ArrayList<Container>();
                for (cap void() customer : this.waitingCustomers) {
                    send customer();
                }
                return tmp;
            }
        }
    }
    
    /**
     * Return the number of containers currently at the table.
     */
    public int numberOfContainers() {
        return this.containers.size();
    }
    
}