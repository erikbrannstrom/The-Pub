import edu.ucdavis.jr.*;
import java.util.*;

public class Monitor {

  public static void activate() {
    try {
      JR.registerQuiescenceAction(done);
      send run();
    }
    catch (QuiescenceRegistrationException e) {
      e.printStackTrace();
    }
  }

  private static op void done();

  private static op void run() {
    receive done();
    ThreadGroup tg = Thread.currentThread().getThreadGroup();
    Thread[] ts = new Thread[5];
    StackTraceElement[][] ste = new StackTraceElement[5][];
    tg.enumerate(ts);
    int i = 0;
    for(Thread t : ts)
      if (t!=null) {
	ste[i] = t.getStackTrace();
	i++;
      }
    try {
      if (ste[0][ste[0].length-1].getClassName().equals("edu.ucdavis.jr.jrx.jrvm$PingChecker") &&
	  ste[1][ste[1].length-1].getClassName().equals("edu.ucdavis.jr.jrx.jrvm$Reaper") &&
	  ste[2][1].getClassName().equals("Monitor") &&
	  ste[2][1].getMethodName().equals("runvoidTovoid") &&
	  ts[3].getName().equals("DestroyJavaVM") &&
	  ts[4]==null)
	System.err.println("All processes terminated properly");
      else {
	System.err.println("The following thread was still alive:");
	System.err.println("   "+ts[3]+" stack trace: ");
	for(StackTraceElement e : ts[3].getStackTrace())
	  System.err.println("      "+e.getClassName()+"."+e.getMethodName());
      }
    }
    catch (NullPointerException e) {
      System.err.println("JR run-time did not behave normally?!?!");
    }
  }
}