import edu.ucdavis.jr.*;
import java.util.*;

/**
 * A customer is a person that will continously order beverages
 * and drink them.
 */
public class Customer {
    /* Allows each customer a unique ID */
    private static int counter = 0;
    
    /* Customer instance variables */
    private Pub.Drink preferredDrink;
    private Table preferredTable;
    private boolean running;
    private int id;
    private int numDrinks;
    private Container currentDrink;
    private MyTime orderTime;
    private boolean lastCallInterrupt = false;
    
    /* Private operation references used to interact with the pub */
    private cap void(cap void(Container), Pub.Drink) order;
    private cap void(Customer) goodbye;
    private cap void(MyTime) stats;
    
    /* Operations allowing other parts of the pub to interact with the customer */
    public op void lastCall();
    public op void finishedDrink();
    public op void leftDrink();
    public op void leave();
    private op void getOrder(Container);
    
    /** 
     * Constructor requires three channels (the first for ordering drinks, the second for saying goodbye
     * to the landlord and the last to send statistics on waiting time) and a reference to their favorite table.
     */
    public Customer(cap void(cap void(Container), Pub.Drink) order, 
                    cap void(Customer) goodbye, 
                    cap void(MyTime) stats, 
                    Table table) {
        Random random = new Random();
        this.order = order;
        this.goodbye = goodbye;
        this.stats = stats;
        int rand = random.nextInt(Pub.Drink.values().length);
        this.preferredDrink = Pub.Drink.values()[rand];
        this.running = true;
        this.numDrinks = 1 + random.nextInt(3);
        this.preferredTable = table;
        this.id = ++Customer.counter;
    }
    
    /**
     * Customer process that allows a customer to continously drink and order drinks until
     * the pub closes or they are done for tonight. 
     */
    public process run {
        // enter pub and say greeting phrase!
        List<String> greetings = new ArrayList<String>();
        greetings.add("Good to see you, old chap!");
        greetings.add("Greetings, friends!");
        greetings.add("Hello Pub!");
        System.out.println("Customer " + this.id + ": " + greetings.get(new Random().nextInt(greetings.size())));
        
        this.getDrink();
        
        while (this.running) {
            inni void finishedDrink() {
                // If last call interrupt, skip one finishedDrink message
                if (this.lastCallInterrupt) {
                    this.lastCallInterrupt = false;
                    continue;
                }
                // Put down glass/cup and either get another one or go home.
                this.leaveContainer();
                if(this.numDrinks == 0) {
                    this.running = false;
                } else {
                    this.getDrink();
                }
            }
            [] void lastCall() {
                // When it's time for last call, beer drinkers will drink up and order a new one.
                if(this.numDrinks > 0 && this.preferredDrink == Pub.Drink.BEER) {
                    this.lastCallInterrupt = true;
                    this.leaveContainer();
                    this.getDrink();
                }
            }
            [] void getOrder(Container c) st this.running {
                if (c == null) {
                    System.out.println("Customer " + this.id + ": Oh, that's to bad. Guess I'll head home.");
                    continue;
                }
                // Receive a container with their beverage of choice.
                this.currentDrink = c;
                this.numDrinks--;
            
                // Send order time to statistics.
                MyTime time = new MyTime(Pub.getClock().getTime().compareTo(this.orderTime));
                System.out.println("Customer " + this.id + ": Thank you! I waited " + time + ".");
                send this.stats(time);
            
                // Set timer for drinking
                send Pub.getClock().setAlarm(this.finishedDrink, new MyTime(0, 10, 0));
            }
            [] void leave() {
                // Landlord tells customer to leave.
                this.numDrinks = 0;
                if(this.currentDrink == null) {
                    // Customer had ordered but will have to come back another night.
                    System.out.println("Customer " + this.id + ": Oh, no more drinking for me..");
                    this.running = false;
                }
            }
        }
        
        // Say goodbye to landlord and everyone else. Time to go home.
        send this.goodbye(this);
        System.out.println("Customer " + this.id + ": I bid you all adiue!");
    }
    
    /**
     * Put down the container on table immediately if possible, otherwise do it once 
     * the assistant says the table has been cleared.
     */
    private void leaveContainer() {
        // put down container
        if(this.preferredTable.putDown(this.leftDrink, this.currentDrink) == false) {
            receive this.leftDrink();
        }
        this.currentDrink = null;
    }
    
    /**
     * Order another dri-hic!-nk.
     */
    private void getDrink() {
        System.out.println("Customer " + this.id + ": I would like a " + this.preferredDrink + ", please.");
        send this.order(getOrder, this.preferredDrink);
        this.orderTime = Pub.getClock().getTime();
    }
}